import { NextRequest, NextResponse } from 'next/server';
import mysql from 'mysql2/promise';

const dbConfig = {
  host: process.env.MYSQL_READONLY_HOST || 'supermembers-prod.cluster-cy8cnze5wxti.ap-northeast-2.rds.amazonaws.com',
  port: parseInt(process.env.MYSQL_READONLY_PORT || '3306'),
  user: process.env.MYSQL_READONLY_USER || 'readonly',
  password: process.env.MYSQL_READONLY_PASSWORD || 'phozphoz1!',
  database: process.env.MYSQL_READONLY_DATABASE || 'supermembers',
  charset: 'utf8mb4',
  timezone: '+09:00',
  acquireTimeout: 60000,
  timeout: 60000,
  reconnect: true,
  ssl: {
    rejectUnauthorized: false
  }
};

interface ContactPreview {
  groupName: string;
  contact: {
    id: string;
    name: string;
    phone: string;
    email?: string;
    company?: string;
    position?: string;
    tags?: string[];
    customFields: Record<string, any>;
  };
  messages: {
    templateId: string;
    templateName: string;
    templateCode: string;
    originalContent: string;
    processedContent: string;
    variables: Record<string, string>;
    characterCount: number;
  }[];
}

// ÎåÄÏÉÅ-ÌÖúÌîåÎ¶ø Îß§Ìïë Í¥ÄÎ†® ÌÉÄÏûÖ Ï†ïÏùò
interface FieldMapping {
  templateVariable: string;
  targetField: string;
  formatter?: 'text' | 'number' | 'currency' | 'date';
  defaultValue?: string;
}

interface TargetTemplateMapping {
  id: string;
  targetGroupId: string;
  templateId: string;
  fieldMappings: FieldMapping[];
  createdAt: string;
  updatedAt: string;
}

export async function POST(request: NextRequest) {
  try {
    const { targetGroups, templates, templateVariables, targetTemplateMappings, limit = 5 } = await request.json();

    console.log('üîÑ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÎØ∏Î¶¨Î≥¥Í∏∞ ÏöîÏ≤≠:', {
      targetGroupsCount: targetGroups?.length || 0,
      templatesCount: templates?.length || 0,
      mappingsCount: targetTemplateMappings?.length || 0,
      templateVariablesCount: Object.keys(templateVariables || {}).length
    });

    if (!targetGroups || !Array.isArray(targetGroups) || targetGroups.length === 0) {
      return NextResponse.json({ error: 'ÎåÄÏÉÅ Í∑∏Î£πÏù¥ ÏóÜÏäµÎãàÎã§.' }, { status: 400 });
    }

    const previewData: ContactPreview[] = [];

    for (const group of targetGroups) {
      try {
        // ÎèôÏ†Å ÏøºÎ¶¨Îßå Ï≤òÎ¶¨ (Ï†ïÏ†Å Í∑∏Î£πÏùÄ Ï†úÏô∏)
        if (group.type !== 'dynamic' || !group.dynamicQuery?.sql) {
          console.log(`Í∑∏Î£π "${group.name}"ÏùÄ ÎèôÏ†Å ÏøºÎ¶¨Í∞Ä ÏïÑÎãàÎØÄÎ°ú Í±¥ÎÑàÎúÄ`);
          continue;
        }

        // MySQL Ïó∞Í≤∞
        const connection = await mysql.createConnection(dbConfig);
        
        try {
          // ÎèôÏ†Å ÏøºÎ¶¨ Ïã§ÌñâÌïòÏó¨ Ïã§Ï†ú ÏàòÏã†Ïûê Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
          const limitedQuery = `${group.dynamicQuery.sql} LIMIT ${limit}`;
          const [rows] = await connection.execute(limitedQuery);
          const contacts = rows as any[];

          if (!contacts || contacts.length === 0) {
            console.log(`Í∑∏Î£π "${group.name}"ÏóêÏÑú Ï°∞ÌöåÎêú Ïó∞ÎùΩÏ≤òÍ∞Ä ÏóÜÏùå`);
            continue;
          }

          console.log(`Í∑∏Î£π "${group.name}"ÏóêÏÑú ${contacts.length}Í∞ú Ïó∞ÎùΩÏ≤ò Ï°∞ÌöåÎê®`);

          // Í∞Å Ïó∞ÎùΩÏ≤òÏóê ÎåÄÌï¥ Í∞úÏù∏ÌôîÎêú Î©îÏãúÏßÄ ÏÉùÏÑ±
          for (const contact of contacts) {
            const contactPreview: ContactPreview = {
              groupName: group.name,
              contact: {
                id: String(contact.id || contact.adId || contact.userId || 'unknown'),
                name: String(contact.name || contact.companyName || contact.title || 'Ïù¥Î¶Ñ ÏóÜÏùå'),
                phone: String(contact.phone || contact.phoneNumber || contact.mobile || 'Î≤àÌò∏ ÏóÜÏùå'),
                email: contact.email,
                company: contact.company || contact.companyName,
                position: contact.position || contact.role,
                tags: [],
                customFields: contact
              },
              messages: []
            };

            // ÏÑ†ÌÉùÎêú ÌÖúÌîåÎ¶øÎì§Ïóê ÎåÄÌï¥ Í∞úÏù∏ÌôîÎêú Î©îÏãúÏßÄ ÏÉùÏÑ±
            if (templates && Array.isArray(templates)) {
              for (const template of templates) {
                console.log(`üîß ÌÖúÌîåÎ¶ø "${template.templateName}" Ï≤òÎ¶¨ Ï§ë...`);
                
                // Ìï¥Îãπ Í∑∏Î£πÍ≥º ÌÖúÌîåÎ¶øÏóê ÎåÄÌïú Îß§Ìïë Ï†ïÎ≥¥ Ï∞æÍ∏∞
                const targetMapping = targetTemplateMappings?.find((mapping: TargetTemplateMapping) => 
                  mapping.targetGroupId === group.id && mapping.templateId === template.id
                );

                console.log(`üîç Îß§Ìïë Ï†ïÎ≥¥:`, {
                  groupId: group.id,
                  templateId: template.id,
                  mappingFound: !!targetMapping,
                  fieldMappingsCount: targetMapping?.fieldMappings?.length || 0
                });

                const personalizedVariables: Record<string, string> = {};

                if (targetMapping && targetMapping.fieldMappings) {
                  // ÎåÄÏÉÅ-ÌÖúÌîåÎ¶ø Îß§ÌïëÏù¥ ÏûàÎäî Í≤ΩÏö∞: Îß§Ìïë Ï†ïÎ≥¥Î•º ÏÇ¨Ïö©ÌïòÏó¨ Î≥ÄÏàò ÏÉùÏÑ±
                  console.log(`‚úÖ Îß§Ìïë Ï†ïÎ≥¥ ÏÇ¨Ïö©ÌïòÏó¨ Î≥ÄÏàò ÏÉùÏÑ±`);
                  
                  targetMapping.fieldMappings.forEach((fieldMapping: FieldMapping) => {
                    const { templateVariable, targetField, formatter, defaultValue } = fieldMapping;
                    
                    // Ïó∞ÎùΩÏ≤ò Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ìï¥Îãπ ÌïÑÎìú Í∞í Í∞ÄÏ†∏Ïò§Í∏∞
                    let rawValue = contact[targetField];
                    
                    // Í∞íÏù¥ ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
                    if (rawValue === null || rawValue === undefined || rawValue === '') {
                      rawValue = defaultValue || '';
                    }

                    // Ìè¨Îß∑ÌÑ∞ Ï†ÅÏö©
                    let formattedValue = String(rawValue);
                    if (formatter && rawValue) {
                      switch (formatter) {
                        case 'number':
                          formattedValue = Number(rawValue).toLocaleString();
                          break;
                        case 'currency':
                          formattedValue = `${Number(rawValue).toLocaleString()}Ïõê`;
                          break;
                        case 'date':
                          formattedValue = new Date(rawValue).toLocaleDateString();
                          break;
                        default:
                          formattedValue = String(rawValue);
                      }
                    }

                    // ÌÖúÌîåÎ¶ø Î≥ÄÏàòÎ™ÖÏóêÏÑú #{} Ï†úÍ±∞
                    const variableName = templateVariable.replace(/^#{|}$/g, '');
                    personalizedVariables[variableName] = formattedValue;

                    console.log(`üîß Î≥ÄÏàò Îß§Ìïë:`, {
                      templateVariable: variableName,
                      targetField,
                      rawValue,
                      formattedValue,
                      formatter
                    });
                  });
                } else {
                  // Îß§Ìïë Ï†ïÎ≥¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞: Í∏∞Ï°¥ Î∞©Ïãù ÏÇ¨Ïö© (ÌïòÏúÑ Ìò∏ÌôòÏÑ±)
                  console.log(`‚ö†Ô∏è Îß§Ìïë Ï†ïÎ≥¥ ÏóÜÏùå, Í∏∞Ï°¥ Î∞©Ïãù ÏÇ¨Ïö©`);
                  
                  const variables = templateVariables?.[template.id] || {};
                  
                  // Í∏∞Î≥∏ Ïó∞ÎùΩÏ≤ò Ï†ïÎ≥¥ Îß§Ìïë
                  personalizedVariables['Í≥†Í∞ùÎ™Ö'] = contactPreview.contact.name;
                  personalizedVariables['ÌöåÏÇ¨Î™Ö'] = contactPreview.contact.company || 'ÌöåÏÇ¨Î™Ö ÏóÜÏùå';
                  personalizedVariables['ÏßÅÏ±Ö'] = contactPreview.contact.position || 'ÏßÅÏ±Ö ÏóÜÏùå';
                  personalizedVariables['Ïù¥Î©îÏùº'] = contactPreview.contact.email || 'Ïù¥Î©îÏùº ÏóÜÏùå';
                  personalizedVariables['Ï†ÑÌôîÎ≤àÌò∏'] = contactPreview.contact.phone;

                  // MySQL ÏøºÎ¶¨ Í≤∞Í≥ºÏùò Î™®Îì† ÌïÑÎìúÎ•º Î≥ÄÏàòÎ°ú Îß§Ìïë
                  Object.entries(contact).forEach(([key, value]) => {
                    if (value !== null && value !== undefined) {
                      personalizedVariables[key] = String(value);
                    }
                  });

                  // ÏÑ§Ï†ïÎêú Î≥ÄÏàò Í∞íÏúºÎ°ú ÎçÆÏñ¥Ïì∞Í∏∞
                  Object.entries(variables).forEach(([key, value]) => {
                    personalizedVariables[key] = String(value || '');
                  });
                }

                // ÌÖúÌîåÎ¶ø ÎÇ¥Ïö©Ïóê Î≥ÄÏàò ÏπòÌôò
                let processedContent = template.templateContent;
                Object.entries(personalizedVariables).forEach(([key, value]) => {
                  processedContent = processedContent.replace(new RegExp(`#{${key}}`, 'g'), value);
                });

                console.log(`üìù ÏµúÏ¢Ö Î©îÏãúÏßÄ ÏÉùÏÑ±:`, {
                  originalLength: template.templateContent.length,
                  processedLength: processedContent.length,
                  variablesCount: Object.keys(personalizedVariables).length
                });

                contactPreview.messages.push({
                  templateId: template.id,
                  templateName: template.templateName,
                  templateCode: template.templateCode,
                  originalContent: template.templateContent,
                  processedContent,
                  variables: personalizedVariables,
                  characterCount: processedContent.length
                });
              }
            }

            previewData.push(contactPreview);
          }

        } finally {
          await connection.end();
        }

      } catch (groupError) {
        console.error(`Í∑∏Î£π "${group.name}" Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:`, groupError);
        continue;
      }
    }

    // Ï†ÑÏ≤¥ ÏòàÏÉÅ ÏàòÏã†Ïûê Ïàò Í≥ÑÏÇ∞
    let totalEstimatedCount = 0;
    for (const group of targetGroups) {
      try {
        if (group.type !== 'dynamic' || !group.dynamicQuery?.sql) {
          continue;
        }

        const connection = await mysql.createConnection(dbConfig);
        
        try {
          const countQuery = `SELECT COUNT(*) as total FROM (${group.dynamicQuery.sql}) as subquery`;
          const [countRows] = await connection.execute(countQuery);
          const countResult = countRows as any[];
          
          if (countResult && countResult[0] && countResult[0].total) {
            totalEstimatedCount += countResult[0].total;
          }
        } finally {
          await connection.end();
        }
      } catch (countError) {
        console.error(`Í∑∏Î£π "${group.name}" Ïàò Í≥ÑÏÇ∞ Ï§ë Ïò§Î•ò:`, countError);
      }
    }

    console.log('‚úÖ ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ± ÏôÑÎ£å:', {
      previewDataCount: previewData.length,
      totalEstimatedCount,
      messagesGenerated: previewData.reduce((total, contact) => total + contact.messages.length, 0)
    });

    return NextResponse.json({
      success: true,
      data: previewData,
      totalEstimatedCount,
      previewCount: previewData.length
    });

  } catch (error) {
    console.error('‚ùå ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÎØ∏Î¶¨Î≥¥Í∏∞ Ïò§Î•ò:', error);
    return NextResponse.json(
      { error: 'ÎØ∏Î¶¨Î≥¥Í∏∞Î•º ÏÉùÏÑ±ÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' },
      { status: 500 }
    );
  }
} 