openapi: 3.0.3
info:
  title: CRM 시스템 API
  description: |
    **마케팅 자동화 CRM 시스템**의 백엔드 API 명세서입니다.
    
    ### 기술 스택
    - **프레임워크**: Next.js 15 (App Router)
    - **데이터베이스**: Supabase (메타데이터), MySQL (비즈니스 데이터)
    - **메시징**: CoolSMS API
    - **스케줄링**: AWS Lambda + Vercel Cron
  version: 1.0.0
  contact:
    name: CRM API Support
  license:
    name: MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://your-domain.vercel.app
    description: Production server

tags:
  - name: Workflows
    description: 워크플로우 관리
  - name: Messaging
    description: 메시징 서비스
  - name: Database
    description: 데이터베이스 연동
  - name: Scheduler
    description: 스케줄러 시스템
  - name: Webhooks
    description: 웹훅 시스템
  - name: Templates
    description: 템플릿 관리
  - name: Supabase
    description: Supabase 데이터 관리
  - name: Campaigns
    description: 캠페인 관리
  - name: System
    description: 시스템 관리
  - name: Queries
    description: 쿼리 및 매핑
  - name: Cron
    description: 크론 작업
  - name: Auth
    description: 인증

components:
  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "작업 완료 메시지"
        data:
          type: object
        timestamp:
          type: string
          format: date-time
          example: "2025-07-29T09:06:32.946Z"
    
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "에러 메시지"
        error:
          type: string
          example: "상세 에러 정보"
    
    Workflow:
      type: object
      properties:
        id:
          type: string
          example: "workflow_123"
        name:
          type: string
          example: "워크플로우명"
        description:
          type: string
          example: "설명"
        status:
          type: string
          enum: [active, draft, paused]
          example: "active"
        trigger_type:
          type: string
          enum: [webhook, manual, scheduled]
          example: "webhook"
        created_at:
          type: string
          format: date-time
          example: "2025-07-29T00:00:00Z"

    SMSRequest:
      type: object
      required:
        - to
        - message
      properties:
        to:
          type: string
          example: "010-1234-5678"
          description: "수신 전화번호"
        message:
          type: string
          example: "메시지 내용"
          description: "발송할 메시지"
        from:
          type: string
          example: "발신번호"
          description: "발신 전화번호"
        enableRealSending:
          type: boolean
          example: false
          description: "실제 발송 여부"
        variables:
          type: object
          additionalProperties:
            type: string
          example:
            name: "홍길동"
            company: "회사명"

    QueryRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          example: "SELECT * FROM table_name LIMIT 10"
          description: "실행할 SQL 쿼리 (SELECT만 허용)"
        limit:
          type: integer
          example: 1000
          maximum: 50000
          description: "결과 행 제한"

    WebhookEvent:
      type: object
      properties:
        name:
          type: string
          example: "홍길동"
        company:
          type: string
          example: "회사명"
        phone:
          type: string
          example: "010-1234-5678"
        email:
          type: string
          format: email
          example: "test@example.com"
        source:
          type: string
          example: "출처"
        message:
          type: string
          example: "메시지"

paths:
  # Workflows
  /api/supabase/workflows:
    get:
      tags: [Workflows]
      summary: 워크플로우 목록 조회
      parameters:
        - name: action
          in: query
          schema:
            type: string
            enum: [list, get]
          example: "list"
        - name: id
          in: query
          schema:
            type: string
          description: "특정 워크플로우 ID (action=get일 때 필요)"
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Workflow'
    
    post:
      tags: [Workflows]
      summary: 워크플로우 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - name
              properties:
                action:
                  type: string
                  enum: [create, update, delete]
                  example: "create"
                name:
                  type: string
                  example: "워크플로우명"
                description:
                  type: string
                  example: "설명"
                selectedTemplates:
                  type: array
                  items:
                    type: string
                targetGroups:
                  type: array
                  items:
                    type: string
                templatePersonalizations:
                  type: object
                targetTemplateMappings:
                  type: array
                  items:
                    type: object
                scheduleSettings:
                  type: object
                schedule_config:
                  type: object
                testSettings:
                  type: object
                steps:
                  type: array
                  items:
                    type: object
                createdBy:
                  type: string
                  example: "user"
                trigger_type:
                  type: string
                  enum: [manual, webhook, scheduled]
                  example: "manual"
                trigger_config:
                  type: object
                status:
                  type: string
                  enum: [draft, active, paused]
                  example: "draft"
      responses:
        '200':
          description: 워크플로우 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/workflow/execute:
    post:
      tags: [Workflows]
      summary: 워크플로우 실행
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - workflowId
              properties:
                workflow:
                  type: object
                workflowId:
                  type: string
                  example: "workflow_123"
                scheduledExecution:
                  type: boolean
                  example: false
                jobId:
                  type: string
                  example: "job_123"
                scheduledJobId:
                  type: string
                  example: "scheduled_123"
                enableRealSending:
                  type: boolean
                  example: false
      responses:
        '200':
          description: 워크플로우 실행 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/workflow/preview:
    post:
      tags: [Workflows]
      summary: 워크플로우 미리보기
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: 미리보기 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/workflow/test:
    post:
      tags: [Workflows]
      summary: 워크플로우 테스트
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: 테스트 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Messaging
  /api/sms/send:
    post:
      tags: [Messaging]
      summary: SMS 발송
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SMSRequest'
      responses:
        '200':
          description: SMS 발송 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      messageId:
                        type: string
                        example: "test_sms_1753779972569"
                      messageType:
                        type: string
                        enum: [SMS, LMS]
                        example: "SMS"
                      processedMessage:
                        type: string
                        example: "처리된 메시지"
                      testMode:
                        type: boolean
                        example: true
                      actualSending:
                        type: boolean
                        example: false
                      variables:
                        type: object
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/send-message:
    post:
      tags: [Messaging]
      summary: 통합 메시지 발송
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: 메시지 발송 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Database
  /api/mysql/query:
    get:
      tags: [Database]
      summary: MySQL 쿼리 테스트
      parameters:
        - name: test
          in: query
          schema:
            type: string
            enum: [connection]
          example: "connection"
      responses:
        '200':
          description: 테스트 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
    
    post:
      tags: [Database]
      summary: MySQL 쿼리 실행
      description: |
        SQL 쿼리를 실행합니다.
        
        **제한사항:**
        - SELECT 문만 허용
        - 위험한 키워드 차단: drop, delete, update, insert, alter, create, truncate
        - 최대 50,000 행 제한
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: 쿼리 실행 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          rows:
                            type: array
                            items:
                              type: object
                          rowCount:
                            type: integer
                            example: 0
        '400':
          description: 잘못된 쿼리
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mysql/schema:
    get:
      tags: [Database]
      summary: 데이터베이스 스키마 조회
      responses:
        '200':
          description: 스키마 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/mysql/statistics:
    get:
      tags: [Database]
      summary: 데이터베이스 통계
      responses:
        '200':
          description: 통계 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/mysql/companies:
    get:
      tags: [Database]
      summary: 회사 데이터 조회
      responses:
        '200':
          description: 회사 데이터 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/mysql/variables:
    get:
      tags: [Database]
      summary: 변수 매핑 조회
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [tables, variables]
        - name: table
          in: query
          schema:
            type: string
          description: "테이블명 (action=variables일 때 필요)"
      responses:
        '200':
          description: 변수 매핑 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/mysql/table-mappings:
    get:
      tags: [Database]
      summary: 테이블 매핑 조회
      responses:
        '200':
          description: 테이블 매핑 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
    
    post:
      tags: [Database]
      summary: 테이블 매핑 관리
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - tableName
              properties:
                action:
                  type: string
                  enum: [save, delete, toggle]
                tableName:
                  type: string
                  example: "테이블명"
                mapping:
                  type: object
      responses:
        '200':
          description: 테이블 매핑 관리 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/mysql/targets/preview:
    post:
      tags: [Database]
      summary: 대상 미리보기
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: 대상 미리보기 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Scheduler
  /api/scheduler:
    get:
      tags: [Scheduler]
      summary: 스케줄러 상태 조회
      responses:
        '200':
          description: 스케줄러 상태 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
    
    post:
      tags: [Scheduler]
      summary: 스케줄러 상태 관리
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  example: "cancel_workflow_schedule"
                workflowId:
                  type: string
                  example: "workflow_123"
      responses:
        '200':
          description: 스케줄러 상태 관리 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/scheduler/health:
    get:
      tags: [Scheduler]
      summary: 스케줄러 헬스체크
      responses:
        '200':
          description: 헬스체크 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          health_check:
                            type: object
                            properties:
                              timestamp:
                                type: string
                                format: date-time
                              korea_time:
                                type: string
                              check_type:
                                type: string
                              environment:
                                type: string
                              aws_lambda_enabled:
                                type: boolean
                          cron_status:
                            type: object
                            properties:
                              has_signals:
                                type: boolean
                              last_aws_signal:
                                type: object
                              minutes_since_last_signal:
                                type: integer
                              is_healthy:
                                type: boolean
                              health_status:
                                type: string
                          lambda_status:
                            type: object
                            properties:
                              is_working:
                                type: boolean
                              last_execution:
                                type: string
                                nullable: true
                              pending_overdue_count:
                                type: integer
                              recent_execution_count:
                                type: integer
                          statistics:
                            type: object
                            properties:
                              total:
                                type: integer
                              pending:
                                type: integer
                              running:
                                type: integer
                              completed:
                                type: integer
                              failed:
                                type: integer

  # Webhooks
  /api/webhook/{eventType}:
    post:
      tags: [Webhooks]
      summary: 동적 웹훅 처리
      description: |
        웹훅 이벤트를 처리합니다.
        
        **지원하는 이벤트 타입:** `lead_created`, `signup`, `purchase`, `cancel`, `payment_failed`
      parameters:
        - name: eventType
          in: path
          required: true
          schema:
            type: string
            enum: [lead_created, signup, purchase, cancel, payment_failed]
          example: "lead_created"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookEvent'
      responses:
        '200':
          description: 이벤트 처리 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      triggered_workflows:
                        type: array
                        items:
                          type: string
                      event_data:
                        type: object

  # Templates
  /api/templates/coolsms/list:
    get:
      tags: [Templates]
      summary: CoolSMS 템플릿 목록
      responses:
        '200':
          description: 템플릿 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/templates/coolsms/sdk-list:
    get:
      tags: [Templates]
      summary: CoolSMS SDK 목록
      responses:
        '200':
          description: SDK 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/templates/coolsms/real:
    get:
      tags: [Templates]
      summary: CoolSMS 실제 템플릿
      responses:
        '200':
          description: 실제 템플릿 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/templates/coolsms/test:
    get:
      tags: [Templates]
      summary: CoolSMS 테스트
      responses:
        '200':
          description: 테스트 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/templates/coolsms/sync:
    get:
      tags: [Templates]
      summary: CoolSMS 동기화
      responses:
        '200':
          description: 동기화 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/templates/coolsms/{templateId}:
    get:
      tags: [Templates]
      summary: 특정 템플릿 조회
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
          example: "template_123"
      responses:
        '200':
          description: 템플릿 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/templates/{templateId}/details:
    get:
      tags: [Templates]
      summary: 템플릿 상세 정보
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
          example: "template_123"
      responses:
        '200':
          description: 템플릿 상세 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/templates/sync:
    get:
      tags: [Templates]
      summary: 템플릿 동기화 조회
      responses:
        '200':
          description: 동기화 상태 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
    
    post:
      tags: [Templates]
      summary: 템플릿 동기화 실행
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: 동기화 실행 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/templates/usage:
    get:
      tags: [Templates]
      summary: 템플릿 사용량
      responses:
        '200':
          description: 사용량 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Auth
  /api/auth/signup:
    post:
      tags: [Auth]
      summary: 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                name:
                  type: string
                  example: "홍길동"
      responses:
        '200':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # System
  /api/test-env:
    get:
      tags: [System]
      summary: 환경 변수 확인
      responses:
        '200':
          description: 환경 변수 확인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/db-fields:
    get:
      tags: [System]
      summary: 데이터베이스 필드 조회
      responses:
        '200':
          description: 필드 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: "user_name"
                            label:
                              type: string
                              example: "고객명"
                            type:
                              type: string
                              example: "string"
                            table:
                              type: string
                              example: "users"

  /api/system/cleanup:
    get:
      tags: [System]
      summary: 시스템 정리 상태 조회
      responses:
        '200':
          description: 정리 상태 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
    
    post:
      tags: [System]
      summary: 시스템 정리 실행
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: 정리 실행 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Additional endpoints can be added here following the same pattern... 